use raytracepl::vec3::Vec3;
// use raytracepl::hittable::Material;
// use raytracepl::hittable::HitRecord;
use raytracepl::ray::Ray;
use raytracepl::utils::*;


pub type Mat = Lambertian | Metal | Dielectric;


pub struct Lambertian {
    pub albedo: Vec3;
}

pub fn new_lam(a:Vec3) Lambertian {
    return Lambertian { albedo: a };
}





pub struct Metal {
    pub albedo: Vec3;
    pub fuzz:f64;
}


pub fn new_metal(a:Vec3, f:f64) Metal {
    if f < 1.0 {
        return Metal { albedo: a, fuzz: f };
    } else {
        return Metal { albedo: a, fuzz: 1.0 };
    }
}


pub struct Dielectric {
    pub ir: f64;
}

pub fn new_dielectric(index_of_refraction: f64) Dielectric {
    return Dielectric { ir: index_of_refraction };
}


impl Dielectric {
    pub fn reflectance(cosine: f64, ref_idx: f64) f64 {
        // Use Schlick's approximation for reflectance.
        let r0 = (1.0 - ref_idx) / (1.0 + ref_idx);
        r0 = r0 * r0;
        return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);
    }
}
