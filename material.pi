use raytracepl::vec3::Vec3;
use raytracepl::hittable::Material;
use raytracepl::hittable::HitRecord;
use raytracepl::ray::Ray;
use raytracepl::utils::*;


pub struct Lambertian {
    albedo: Vec3;
}

pub fn new_lam(a:Vec3) Lambertian {
    return Lambertian { albedo: a };
}

impl Material for Lambertian {
    fn scatter(_r_in: Ray, rec:  HitRecord, attenuation: * Vec3, scattered: * Ray) bool {
        let scatter_direction = rec.normal.add( vec3::ranndom_unit_vector());
        
        // Catch degenerate scatter direction
        if scatter_direction.near_zero() {
            scatter_direction = rec.normal;
        }

        *scattered = ray::new(rec.p, scatter_direction);
        *attenuation = self.albedo;
        return true;
    }
}

pub struct Metal {
    albedo: Vec3;
    fuzz:f64;
}


pub fn new_metal(a:Vec3, f:f64) Metal {
    if f < 1.0 {
        return Metal { albedo: a, fuzz: f };
    } else {
        return Metal { albedo: a, fuzz: 1.0 };
    }
}

impl Material for Metal {
    fn scatter(r_in: Ray, rec:  HitRecord, attenuation: * Vec3, scattered: * Ray) bool {
        let reflected = r_in.direction().unit_vector().reflect(rec.normal);
        *scattered = ray::new(
            rec.p,
            reflected.add(
                vec3::ranndom_unit_vector().mul(self.fuzz)
            )
        );
        *attenuation = self.albedo;
        return true;
    }
}

pub struct Dielectric {
    ir: f64;
}

pub fn new_dielectric(index_of_refraction: f64) Dielectric {
    return Dielectric { ir: index_of_refraction };
}


impl Dielectric {
    fn reflectance(cosine: f64, ref_idx: f64) f64 {
        // Use Schlick's approximation for reflectance.
        let r0 = (1.0 - ref_idx) / (1.0 + ref_idx);
        r0 = r0 * r0;
        return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);
    }
}

impl Material for Dielectric {
    fn scatter(r_in: Ray, rec:  HitRecord, attenuation: * Vec3, scattered: * Ray) bool {
        *attenuation = vec3::new(1.0, 1.0, 1.0);
        let refraction_ration;
        if rec.front_face {
            refraction_ration = 1.0 / self.ir;
        } else {
            refraction_ration = self.ir;
        }

        let unit_direction = r_in.direction().unit_vector();
        let cos_theta = fmin(unit_direction.neg().dot(rec.normal), 1.0);
        let sin_theta = sqrt_64(1.0 - cos_theta * cos_theta);

        let cannot_refract = refraction_ration * sin_theta > 1.0;
        let direction;
        if cannot_refract || self.reflectance(
            cos_theta, refraction_ration) > random_f64(){
            direction = unit_direction.reflect(rec.normal);
        } else {
            direction = unit_direction.refract(
                rec.normal, refraction_ration);
        }

        *scattered = ray::new(rec.p, direction);
        return true;
    }
}


