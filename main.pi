use std::io;
use raytracepl::vec3::Vec3;
use raytracepl::ray::Ray;
use raytracepl::utils::*;
use raytracepl::color;
use raytracepl::hittable::Hittable;
use raytracepl::hittable_list::HittableList;
use raytracepl::sphere::Sphere;
use raytracepl::interval;
use raytracepl::camera::Camera;
use raytracepl::material;


fn main() i64 {
    // World
    let world = hittable_list::new();

    let ground_material = material::new_lam(vec3::new(0.5, 0.5, 0.5));
    world.add(sphere::new(vec3::new(0.0, -1000.0, 0.0), 1000.0, ground_material));

    for let a = -11; a < 11; a = a + 1 {
        for let b = -11; b < 11; b = b + 1 {
            let choose_mat = random_f64();
            let a = a*5;
            let b = b*5;
            let center = vec3::new(a as f64 + 0.9 * random_f64(), 0.2, b as f64 + 0.9 * random_f64());

            if (center.sub(vec3::new(4.0, 0.2, 0.0))).length() > 0.9 {
                let sphere_material:hittable::Material;

                if choose_mat < 0.3 {
                    // diffuse
                    let albedo = vec3::random().mul_vec(vec3::random());
                    sphere_material = material::new_lam(albedo);
                    world.add(sphere::new(center, 0.2, sphere_material));
                } else if choose_mat < 0.6 {
                    // metal
                    let albedo = vec3::random_range(0.5, 1.0);
                    let fuzz = random_f64_range(0.0, 0.5);
                    sphere_material = material::new_metal(albedo, fuzz);
                    world.add(sphere::new(center, 0.2, sphere_material));
                } else {
                    // glass
                    sphere_material = material::new_dielectric(1.5);
                    world.add(sphere::new(center, 0.2, sphere_material));
                }
            }
        }
    }

    let material1 = material::new_dielectric(1.5);
    world.add(sphere::new(vec3::new(0.0, 1.0, 0.0), 1.0, material1));

    let material2 = material::new_lam(vec3::new(0.4, 0.2, 0.1));
    world.add(sphere::new(vec3::new(-4.0, 1.0, 0.0), 1.0, material2));

    let material3 = material::new_metal(vec3::new(0.7, 0.6, 0.5), 0.0);
    world.add(sphere::new(vec3::new(4.0, 1.0, 0.0), 1.0, material3));

    // Camera
    let cam = camera::default();

    cam.aspect_ratio = 16.0 / 9.0;
    cam.image_width = 1200;
    cam.sample_per_pixel = 500;
    cam.max_depth = 50;

    cam.vfov = 20.0;
    cam.lookfrom = vec3::new(13.0, 2.0, 3.0);
    cam.lookat = vec3::new(0.0, 0.0, 0.0);
    cam.vup = vec3::new(0.0, 1.0, 0.0);

    cam.defocus_angle = 0.6;
    cam.focus_dist = 10.0;

    // Render
    cam.render(&world);
    return 0;
}


